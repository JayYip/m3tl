# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"BaseParams": "00_0_base_params.ipynb",
         "CRFParams": "00_0_base_params.ipynb",
         "StaticBatchParams": "00_0_base_params.ipynb",
         "DynamicBatchSizeParams": "00_0_base_params.ipynb",
         "Params": "00_1_params.ipynb",
         "load_transformer_tokenizer": "01_utils.ipynb",
         "load_transformer_config": "01_utils.ipynb",
         "load_transformer_model": "01_utils.ipynb",
         "get_label_encoder_save_path": "01_utils.ipynb",
         "LabelEncoder": "01_utils.ipynb",
         "create_path": "01_utils.ipynb",
         "need_make_label_encoder": "01_utils.ipynb",
         "get_or_make_label_encoder": "01_utils.ipynb",
         "cluster_alphnum": "01_utils.ipynb",
         "filter_empty": "01_utils.ipynb",
         "infer_shape_and_type_from_dict": "01_utils.ipynb",
         "get_transformer_main_model": "01_utils.ipynb",
         "get_embedding_table_from_model": "01_utils.ipynb",
         "get_shape_list": "01_utils.ipynb",
         "gather_indexes": "01_utils.ipynb",
         "dispatch_features": "01_utils.ipynb",
         "create_dict_from_nested_model": "01_utils.ipynb",
         "variable_summaries": "01_utils.ipynb",
         "set_phase": "01_utils.ipynb",
         "get_phase": "01_utils.ipynb",
         "set_is_pyspark": "01_utils.ipynb",
         "get_is_pyspark": "01_utils.ipynb",
         "M3TL_PHASE": "01_utils.ipynb",
         "IS_PYSPARK": "01_utils.ipynb",
         "TFRedundantWarningFilter": "01_utils.ipynb",
         "compress_tf_warnings": "01_utils.ipynb",
         "BOS_TOKEN": "02_special_tokens.ipynb",
         "EOS_TOKEN": "02_special_tokens.ipynb",
         "CLS_TOKEN": "02_special_tokens.ipynb",
         "SPACE_TOKEN": "02_special_tokens.ipynb",
         "UNK_TOKEN": "02_special_tokens.ipynb",
         "SPECIAL_TOKENS": "02_special_tokens.ipynb",
         "TRAIN": "02_special_tokens.ipynb",
         "EVAL": "02_special_tokens.ipynb",
         "PREDICT": "02_special_tokens.ipynb",
         "MODAL_LIST": "02_special_tokens.ipynb",
         "truncate_seq_pair": "03_bert_utils.ipynb",
         "punc_augument": "03_bert_utils.ipynb",
         "create_instances_from_document": "03_bert_utils.ipynb",
         "create_masked_lm_predictions": "03_bert_utils.ipynb",
         "MaskedLmInstance": "03_bert_utils.ipynb",
         "TrainingInstance": "03_bert_utils.ipynb",
         "convert_labels_to_ids": "04_create_bert_features.ipynb",
         "create_bert_pretraining": "04_create_bert_features.ipynb",
         "mask_inputs_for_mask_lm": "04_create_bert_features.ipynb",
         "collect_modal_name": "04_create_bert_features.ipynb",
         "infer_modal": "04_create_bert_features.ipynb",
         "unify_inputs": "04_create_bert_features.ipynb",
         "NextExampleException": "04_create_bert_features.ipynb",
         "text_modal_input_handling": "04_create_bert_features.ipynb",
         "array_modal_input_handling": "04_create_bert_features.ipynb",
         "category_modal_input_handling": "04_create_bert_features.ipynb",
         "separate_inputs_labels": "04_create_bert_features.ipynb",
         "remove_dict_prefix": "04_create_bert_features.ipynb",
         "create_multimodal_bert_features": "04_create_bert_features.ipynb",
         "create_multimodal_bert_features_generator": "04_create_bert_features.ipynb",
         "has_key_startswith": "05_preproc_decorator.ipynb",
         "convert_legacy_output": "05_preproc_decorator.ipynb",
         "input_format_check": "05_preproc_decorator.ipynb",
         "none_generator": "05_preproc_decorator.ipynb",
         "convert_data_to_features": "05_preproc_decorator.ipynb",
         "convert_data_to_features_pyspark": "05_preproc_decorator.ipynb",
         "check_if_le_created": "05_preproc_decorator.ipynb",
         "preprocessing_fn": "05_preproc_decorator.ipynb",
         "serialize_fn": "06_read_write_tfrecord.ipynb",
         "make_tfrecord_local": "06_read_write_tfrecord.ipynb",
         "make_tfrecord_pyspark": "06_read_write_tfrecord.ipynb",
         "make_tfrecord": "06_read_write_tfrecord.ipynb",
         "chain_processed_data": "06_read_write_tfrecord.ipynb",
         "write_tfrecord": "06_read_write_tfrecord.ipynb",
         "make_feature_desc": "06_read_write_tfrecord.ipynb",
         "reshape_tensors_in_dataset": "06_read_write_tfrecord.ipynb",
         "add_loss_multiplier": "06_read_write_tfrecord.ipynb",
         "set_shape_for_dataset": "06_read_write_tfrecord.ipynb",
         "get_dummy_features": "06_read_write_tfrecord.ipynb",
         "add_dummy_features_to_dataset": "06_read_write_tfrecord.ipynb",
         "read_tfrecord": "06_read_write_tfrecord.ipynb",
         "element_length_func": "07_input_fn.ipynb",
         "train_eval_input_fn": "07_input_fn.ipynb",
         "predict_input_fn": "07_input_fn.ipynb",
         "process_line_msr_pku": "08_predefined_problems_cws.ipynb",
         "process_line_as_training": "08_predefined_problems_cws.ipynb",
         "process_line_cityu": "08_predefined_problems_cws.ipynb",
         "get_process_fn": "08_predefined_problems_cws.ipynb",
         "get_cws_fn": "08_predefined_problems_cws.ipynb",
         "get_as_cws_fn": "08_predefined_problems_cws.ipynb",
         "get_msr_cws_fn": "08_predefined_problems_cws.ipynb",
         "get_pku_cws_fn": "08_predefined_problems_cws.ipynb",
         "get_city_cws_fn": "08_predefined_problems_cws.ipynb",
         "gold_horse_ent_type_process_fn": "09_predefined_problems_ner.ipynb",
         "chinese_literature_ent_type_process_fn": "09_predefined_problems_ner.ipynb",
         "read_ner_data": "09_predefined_problems_ner.ipynb",
         "get_weibo_ner_fn": "09_predefined_problems_ner.ipynb",
         "gold_horse_segment_process_fn": "09_predefined_problems_ner.ipynb",
         "get_weibo_cws_fn": "09_predefined_problems_ner.ipynb",
         "read_bosonnlp_data": "09_predefined_problems_ner.ipynb",
         "read_msra": "09_predefined_problems_ner.ipynb",
         "get_msra_ner_fn": "09_predefined_problems_ner.ipynb",
         "get_boson_ner_fn": "09_predefined_problems_ner.ipynb",
         "NER_TYPE": "09_predefined_problems_ner.ipynb",
         "generate_fake_data": "10_predefined_problems_test.ipynb",
         "create_fake_label_encoder": "10_predefined_problems_test.ipynb",
         "get_fake_contrastive_learning_fn": "10_predefined_problems_test.ipynb",
         "get_weibo_fake_cls_fn": "10_predefined_problems_test.ipynb",
         "get_weibo_fake_ner_fn": "10_predefined_problems_test.ipynb",
         "get_weibo_pretrain_fn": "10_predefined_problems_test.ipynb",
         "get_weibo_fake_multi_cls_fn": "10_predefined_problems_test.ipynb",
         "get_weibo_masklm": "10_predefined_problems_test.ipynb",
         "get_weibo_premask_mlm": "10_predefined_problems_test.ipynb",
         "get_weibo_fake_regression": "10_predefined_problems_test.ipynb",
         "get_weibo_fake_vector_fit": "10_predefined_problems_test.ipynb",
         "pyspark_fake_cls": "10_predefined_problems_test.ipynb",
         "pyspark_fake_seq_tag": "10_predefined_problems_test.ipynb",
         "pyspark_fake_multi_cls": "10_predefined_problems_test.ipynb",
         "MultiModalBertModel": "11_modeling.ipynb",
         "empty_tensor_handling_loss": "12_0_problem_type_utils.ipynb",
         "nan_loss_handling": "12_0_problem_type_utils.ipynb",
         "create_dummy_if_empty": "12_0_problem_type_utils.ipynb",
         "BaseTop": "12_0_problem_type_utils.ipynb",
         "pad_to_shape": "12_0_problem_type_utils.ipynb",
         "SimCSE": "12_10_problem_type_contrast_learning.ipynb",
         "get_contrastive_learning_model": "12_10_problem_type_contrast_learning.ipynb",
         "ContrastiveLearning": "12_10_problem_type_contrast_learning.ipynb",
         "contrastive_learning_get_or_make_label_encoder_fn": "12_10_problem_type_contrast_learning.ipynb",
         "contrastive_learning_label_handling_fn": "12_10_problem_type_contrast_learning.ipynb",
         "Classification": "12_1_problem_type_cls.ipynb",
         "cls_get_or_make_label_encoder_fn": "12_1_problem_type_cls.ipynb",
         "cls_label_handling_fn": "12_1_problem_type_cls.ipynb",
         "MultiLabelClassification": "12_2_problem_type_multi_cls.ipynb",
         "multi_cls_get_or_make_label_encoder_fn": "12_2_problem_type_multi_cls.ipynb",
         "multi_cls_label_handling_fn": "12_2_problem_type_multi_cls.ipynb",
         "SequenceLabel": "12_3_problem_type_seq_tag.ipynb",
         "seq_tag_get_or_make_label_encoder_fn": "12_3_problem_type_seq_tag.ipynb",
         "seq_tag_label_handling": "12_3_problem_type_seq_tag.ipynb",
         "seq_tag_label_handling_fn": "12_3_problem_type_seq_tag.ipynb",
         "MaskLM": "12_4_problem_type_masklm.ipynb",
         "masklm_get_or_make_label_encoder_fn": "12_4_problem_type_masklm.ipynb",
         "masklm_label_handling_fn": "12_4_problem_type_masklm.ipynb",
         "Seq2Seq": "12_5_problem_type_seq2seq_text.ipynb",
         "seq2seq_text_get_or_make_label_encoder_fn": "12_5_problem_type_seq2seq_text.ipynb",
         "pad_wrapper": "12_5_problem_type_seq2seq_text.ipynb",
         "seq2seq_text_label_handling_fn": "12_5_problem_type_seq2seq_text.ipynb",
         "PreTrain": "12_6_problem_type_pretrain.ipynb",
         "pretrain_get_or_make_label_encoder_fn": "12_6_problem_type_pretrain.ipynb",
         "pretrain_label_handling_fn": "12_6_problem_type_pretrain.ipynb",
         "mse_wrapper": "12_7_problem_type_regression.ipynb",
         "Regression": "12_7_problem_type_regression.ipynb",
         "regression_get_or_make_label_encoder_fn": "12_7_problem_type_regression.ipynb",
         "regression_label_handling_fn": "12_7_problem_type_regression.ipynb",
         "cosine_wrapper": "12_8_problem_type_vector_fit.ipynb",
         "VectorFit": "12_8_problem_type_vector_fit.ipynb",
         "vector_fit_get_or_make_label_encoder_fn": "12_8_problem_type_vector_fit.ipynb",
         "vector_fit_label_handling_fn": "12_8_problem_type_vector_fit.ipynb",
         "PreMaskMLM": "12_9_problem_type_premask_mlm.ipynb",
         "premask_mlm_get_or_make_label_encoder_fn": "12_9_problem_type_premask_mlm.ipynb",
         "premask_mlm_label_handling_fn": "12_9_problem_type_premask_mlm.ipynb",
         "filter_loss": "13_model_fn.ipynb",
         "BertMultiTaskBody": "13_model_fn.ipynb",
         "BertMultiTaskTop": "13_model_fn.ipynb",
         "BertMultiTask": "13_model_fn.ipynb",
         "create_keras_model": "14_run_bert_multitask.ipynb",
         "get_params_ready": "14_run_bert_multitask.ipynb",
         "train_bert_multitask": "14_run_bert_multitask.ipynb",
         "create_tensorspec_from_shape_type": "14_run_bert_multitask.ipynb",
         "trim_checkpoint_for_prediction": "14_run_bert_multitask.ipynb",
         "eval_bert_multitask": "14_run_bert_multitask.ipynb",
         "arr_to_str": "14_run_bert_multitask.ipynb",
         "decode_predictions": "14_run_bert_multitask.ipynb",
         "predict_bert_multitask": "14_run_bert_multitask.ipynb",
         "MTLBase": "15-00_mtl_model_base.ipynb",
         "BasicMTL": "15-00_mtl_model_base.ipynb",
         "MMoE": "15-01_mtl_model_mmoe.ipynb",
         "LossCombinationStrategyBase": "16-00_loss_combination_strategy.ipynb",
         "SumLossCombination": "16-00_loss_combination_strategy.ipynb",
         "Hdfs": "17_pyspark_utils.ipynb",
         "join_dict_of_rdd": "17_pyspark_utils.ipynb",
         "get_text_file_from_executor": "17_pyspark_utils.ipynb",
         "repar_rdd": "17_pyspark_utils.ipynb",
         "DefaultMultimodalEmbedding": "18-00_embedding_layer.ipynb",
         "DuplicateAugMultimodalEmbedding": "18-00_embedding_layer.ipynb",
         "TestBase": "99_test_base.ipynb",
         "PysparkTestBase": "99_test_base.ipynb",
         "create_dummy_features_hidden_features": "99_test_base.ipynb",
         "test_top_layer": "99_test_base.ipynb"}

modules = ["base_params.py",
           "params.py",
           "utils.py",
           "special_tokens.py",
           "bert_preprocessing/bert_utils.py",
           "bert_preprocessing/create_bert_features.py",
           "preproc_decorator.py",
           "read_write_tfrecord.py",
           "input_fn.py",
           "predefined_problems/cws_data.py",
           "predefined_problems/ner_data.py",
           "predefined_problems/test_data.py",
           "modeling.py",
           "problem_types/utils.py",
           "problem_types/contrastive_learning.py",
           "problem_types/cls.py",
           "problem_types/multi_cls.py",
           "problem_types/seq_tag.py",
           "problem_types/masklm.py",
           "problem_types/seq2seq_text.py",
           "problem_types/pretrain.py",
           "problem_types/regression.py",
           "problem_types/vector_fit.py",
           "problem_types/premask_mlm.py",
           "model_fn.py",
           "run_bert_multitask.py",
           "mtl_model/base.py",
           "mtl_model/mmoe.py",
           "loss_strategy/base.py",
           "pyspark_utils.py",
           "embedding_layer/base.py",
           "test_base.py"]

doc_url = "https://JayYip.github.io/m3tl/"

git_url = "https://github.com/JayYip/m3tl/tree/master/"

def custom_doc_links(name): return None
